import httpx
import json
from aiogram import Bot, Dispatcher, types, exceptions
from aiogram import executor
import os
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.middlewares.logging import LoggingMiddleware
from aiogram.utils import executor
import requests
import asyncio
from aiogram.types import ParseMode

API_K = 'ddosxd-api-1jq4e9xbzu2ilgn'
DDOSXD_API_KEY = 'ddosxd-api-1jq4e9xbzu2ilgn'

bot = Bot(token="6640154150:AAHgZJRXwzsw-jA8ffXoVlhjZXm8oFTyNu4")
dp = Dispatcher(bot)
users = set()
admins = set()
gpt_count = 0
sdxl_count = 0
start_count = 0

API_KEY = 'ddosxd-api-1jq4e9xbzu2ilgn'
headers = {'Authorization': API_KEY}

API_URL = 'https://api.ddosxd.ru/v1/chat'

logging.basicConfig(level=logging.INFO)

dp = Dispatcher(bot)
dp.middleware.setup(LoggingMiddleware())

API_KY = 'ddosxd-api-1jq4e9xbzu2ilgn'
headers = {'Authorization': API_KY}

@dp.message_handler(commands=["start"])
async def start_cmd(message: types.Message):
    global users, start_count
    if message.from_user.id not in users:
        with open("users.txt", "a") as file:
            file.write(f"{message.from_user.id};")
        users.add(message.from_user.id)
    start_count += 1
    await message.reply("""[üî•] –í—ã –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ –ª—É—á—à–µ–≥–æ –∏—Ö –ª—É—á—à–∏—Ö –±–æ—Ç–∞!

[üîä] –ú–æ–¥–µ–ª–∏ —Ç–µ–∫—Å—Ç–∞: 

[ü™Ñ] –ö–æ–º–∞–Ω–¥—ã:
/gpt PROMPT - –ü–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç GPT. 

/gpt35 PROMPT ‚Äî –ë—ã—Å—Ç—Ä–∞—è, —Å–∏–ª—å–Ω–∞—è –º–æ–¥–µ–ª—å!

/claude2 PROMPT ‚Äî –ï—â–µ –ª—É—á—à–µ, —á–µ–º –¥—Ä—É–≥–∏–µ

[ü™©] –ú–æ–¥–µ–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:

/pixart PROMPT ‚Äî –†–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ, –º–∏–Ω–∏–º–∞–ª–∏–∑–º –∏ –º–Ω–æ–≥–æ–µ –¥—Ä—É–≥–æ–µ!


[üîä] –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ –±–æ—Ç–∞: @officialksenon / thx to opo && ddosxd""")

@dp.message_handler(commands=["gpt"])
async def gpt_cmd(message: types.Message):
    global gpt_count
    args = message.get_args()
    gpt_count += 1
    await message.reply("""[ü™Ñ] –í–∞—à –æ—Ç–≤–µ—Ç —É–∂–µ –≥–æ—Ç–æ–≤ üî•
–ú—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–∞–º—É—é –±—ã—Å—Ç—Ä—É—é –º–æ–¥–µ–ª—å –¥–ª—è –≤–∞—à–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è.""")

    async with httpx.AsyncClient(timeout=30.0) as client:
        resp = await client.post("https://opo.k.vu/private/apis/gpt", json={"prompt": args})
        data = resp.text
        await message.reply(f"–û—Ç–≤–µ—Ç GPT ü§ñ: {data}")

@dp.message_handler(commands=['zephyr'])
async def zephyr_command(message: types.Message):
    await message.reply("[üé≤] –í–∞—à –∑–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω. –ñ–¥—ë–º –æ—Ç–≤–µ—Ç–∞!\n\n–ú—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –±—ã—Å—Ç—Ä—ã–µ –º–æ–¥–µ–ª–∏!")

    # Your existing code to send request and get response
    data = {'model': 'zephyr', 'messages': [{'role': 'user', 'content': '–ü—Ä–∏–≤–µ—Ç'}]}
    headers = {'Authorization': DDOSXD_API_KEY}
    response = requests.post('https://api.ddosxd.ru/v1/chat', headers=headers, json=data)
    response_data = response.json()

    if response_data.get('status') == 200:
        reply_text = response_data.get('reply')
        await message.reply(reply_text, parse_mode=ParseMode.MARKDOWN)


@dp.message_handler(commands=["sdxl"])
async def sdxl_cmd(message: types.Message):
    global sdxl_count
    args = message.get_args()
    sdxl_count += 1
    await message.reply("""[ü™Ñ] –í–∞—à–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É–∂–µ –≥–æ—Ç–æ–≤–æ üî•
–ú—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–∞–º—É—é –±—ã—Å—Ç—Ä—É—é –º–æ–¥–µ–ª—å –¥–ª—è –≤–∞—à–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è.""")

    async with httpx.AsyncClient(timeout=120.0) as client:
        resp = await client.post("https://opo.k.vu/private/apis/sdxl", json={"prompt": args})
        data = resp.text
        await message.reply(file=data, caption=f"–í–∞—à–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ, –≤–æ—Ç –æ–Ω–æ: {args}")

@dp.message_handler(commands=["readusers"])
async def readusers_cmd(message: types.Message):
    with open("users.txt", "r") as file:
        user_list = file.read().split(";")
    users = "\n".join([f"{user}" for user in user_list if user])
    await message.reply(f"""–õ—é–¥–∏, –∫–æ—Ç–æ—Ä—ã–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç –±–æ—Ç–∞:
{users}""")

@dp.message_handler(commands=['gpt35'])
async def generate_response(message: types.Message):
    user_prompt = message.get_args()

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ –æ—Ç–≤–µ—Ç –≥–æ—Ç–æ–≤–∏—Ç—Å—è
    await message.reply("""[üì∂] –û—Ç–≤–µ—Ç —É–∂–µ –≥–æ—Ç–æ–≤... –í—ã –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ –±—ã—Å—Ç—Ä—É—é GPT 3.5 –º–æ–¥–µ–ª—å!""")

    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç GPT-3.5
    data = {'model': 'gpt-3.5-turbo', 'messages': [{'role': 'user', 'content': user_prompt}]}
    response = requests.post(API_URL, headers=headers, json=data)

    try:
        response_json = response.json()
        generated_text = response_json['reply']
        result_text = f"{generated_text}"
    except KeyError:
        result_text = "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç –º–æ–¥–µ–ª–∏."

    # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –æ—Ç GPT-3.5 –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é
    await message.reply(result_text)

@dp.message_handler(commands=["claude2"])
async def process_claude2_command(message: types.Message):
    user_prompt = message.get_args()

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ –æ—Ç–≤–µ—Ç –≥–æ—Ç–æ–≤–∏—Ç—Å—è
    await message.reply("""[üì∂] –û—Ç–≤–µ—Ç —É–∂–µ –≥–æ—Ç–æ–≤... –í—ã –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ –±—ã—Å—Ç—Ä—É—é Claude2 –º–æ–¥–µ–ª—å!""")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ API
    data = {
        'model': 'claude-2',
        'prompt': f'\n\nHuman: {user_prompt}\n\nAssistant: ',
        'userId': str(message.from_user.id)
    }

    response = requests.post('https://beta.ddosxd.ru/v1/prompt', headers=headers, json=data)
    result_json = json.loads(response.text)

    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç
    result_text = result_json.get('reply', '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞ –æ—Ç –º–æ–¥–µ–ª–∏.')

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç –æ—Ç –º–æ–¥–µ–ª–∏
    await message.reply(result_text)

@dp.message_handler(commands=["sendmessage"])
async def sendmessage_cmd(message: types.Message):
    args = message.get_args()
    with open("users.txt", "r") as file:
        user_list = file.read().split(";")
    for user_id_str in user_list:
        if user_id_str:
            try:
                user_id = int(user_id_str)
                await bot.send_message(user_id, args)
            except exceptions.ChatNotFound:
                print(f"Chat not found for user: {user_id}")
            except ValueError:
                print(f"Invalid user_id format: {user_id_str}")
    await message.reply(f"""[üì¨] –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º: {args}""")

@dp.message_handler(commands=["nano"])
async def nano_cmd(message: types.Message):
    args = message.get_args().split(" ", 2)
    if len(args) == 3:
        file_name, file_format, new_text = args
        file_path = f"{file_name}.{file_format}"
        with open(file_path, "w") as file:
            file.write(new_text)
        await message.reply(f"""[üñäÔ∏è] –¢–µ–∫—Å—Ç –≤ —Ñ–∞–π–ª–µ {file_path} —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: {new_text}""")
    else:
        await message.reply("""[‚ùå] –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã /nano. –ü—Ä–∏–º–µ—Ä: /nano users txt hi!""")

@dp.message_handler(commands=["infousers"])
async def infousers_cmd(message: types.Message):
    global users, gpt_count, sdxl_count, start_count
    users_count = len(users)
    await message.reply(f"""[‚ÑπÔ∏è] –ò—Å–ø–æ–ª—å–∑—É—é—Ç –ò–ò: {users_count}
–ù–∞–ø–∏—Å–∞–Ω–æ /gpt: {gpt_count}
–ù–∞–ø–∏—Å–∞–Ω–æ /sdxl: {sdxl_count}
–ù–∞–ø–∏—Å–∞–Ω–æ /start: {start_count}""")

@dp.message_handler(commands=['pixart'])
async def pixart_command(message: types.Message):
    try:
        prompt = message.get_args()
        if not prompt:
            await message.reply("–í—ã –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –Ω–∞–ø–∏—Å–∞–ª–∏ –∫–æ–º–∞–Ω–¥—É.")
            return

        await message.reply("""[ü™Ñ] –í–∞—à–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É–∂–µ –≥–æ—Ç–æ–≤–æ üî•
–ú—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–∞–º—É—é –±—ã—Å—Ç—Ä—É—é –º–æ–¥–µ–ª—å –¥–ª—è –≤–∞—à–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è.""")

        data = {
            'model': 'pixart',
            'prompt': prompt
        }

        response = requests.post('https://api.ddosxd.ru/v1/image', headers={'Authorization': API_K}, json=data)
        image_url = response.json()['photos'][0]

        await bot.send_photo(message.chat.id, photo=image_url)
    
    except Exception as e:
        print(f"Error: {e}")


@dp.message_handler(commands=["addfile"])
async def addfile_cmd(message: types.Message):
    args = message.get_args().split(" ", 1)
    if len(args) == 1:
        file_name = args[0]
        with open(file_name, "w"):
            pass
        await message.reply(f"""[üìÑ] –§–∞–π–ª {file_name} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω.""")
    else:
        await message.reply("""[‚ùå] –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã /addfile. –ü—Ä–∏–º–µ—Ä: /addfile example.txt""")

async def admin_check(message: types.Message):
    return message.from_user.id in admins

@dp.message_handler(commands=["adminhelp"])
async def admin_help_cmd(message: types.Message):
    if not admin_check(message):
        return
    await message.reply("""[üõ°Ô∏è] –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:
/sendmessage MESSAGE - –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –±–æ—Ç–∞.
/readusers - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–æ—Ç–∞.
""")

@dp.message_handler(commands=["ownerhelp"])
async def admin_help_cmd(message: types.Message):
    if not admin_check(message):
        return
    await message.reply("""[üõ°Ô∏è] –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞
/adminlist - –∞–¥–º–∏–Ω—ã –±–æ—Ç–∞.
/addfile FILE.NAME - –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Ñ–∞–π–ª.
/deletefile FILE.NAME - –£–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª.
/infousers - –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞.
/nano FILE.FORMAT TEXT - –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç –≤ —Ñ–∞–π–ª–µ.
""")
@dp.message_handler(commands=["password"])
async def password_cmd(message: types.Message):
    global admins
    password = message.get_args()

    if password == "adm!gptbot":
        admins.add(message.from_user.id)
        await message.reply("[üîê] –í—ã –ø–æ–ª—É—á–∏–ª–∏ —Å—Ç–∞—Ç—É—Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
    elif password == "gptowner":
        admins.add(message.from_user.id)
        await message.reply("[üëë] –í—ã –ø–æ–ª—É—á–∏–ª–∏ —Å—Ç–∞—Ç—É—Å –≤–ª–∞–¥–µ–ª—å—Ü–∞.")
    else:
        await message.reply("[‚ùå] –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å.")

@dp.message_handler(commands=["addadmin"])
async def addadmin_cmd(message: types.Message):
    if not admin_check(message):
        return

    username = message.get_args()
    user = await bot.get_chat_member(message.chat.id, username)
    
    if user and user.user:
        admins.add(user.user.id)
        await message.reply(f"[üõ°Ô∏è] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã.")
    else:
        await message.reply(f"[‚ùå] –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∏–º–µ–Ω–µ–º {username}.")

@dp.message_handler(commands=["deleteadmin"])
async def deleteadmin_cmd(message: types.Message):
    if not admin_check(message):
        return

    username = message.get_args()
    user = await bot.get_chat_member(message.chat.id, username)
    
    if user and user.user:
        admins.remove(user.user.id)
        await message.reply(f"[üõ°Ô∏è] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} —É–¥–∞–ª–µ–Ω –∏–∑ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.")
    else:
        await message.reply(f"[‚ùå] –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∏–º–µ–Ω–µ–º {username}.")

@dp.message_handler(commands=["deletefile"])
async def deletefile_cmd(message: types.Message):
    args = message.get_args().split(" ", 1)
    if len(args) == 1:
        file_name = args[0]
        try:
            os.remove(file_name)
            await message.reply(f"""[üóëÔ∏è] –§–∞–π–ª {file_name} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.""")
        except FileNotFoundError:
            await message.reply(f"""[‚ùå] –§–∞–π–ª {file_name} –Ω–µ –Ω–∞–π–¥–µ–Ω.""")
    else:
        await message.reply("""[‚ùå] –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã /deletefile. –ü—Ä–∏–º–µ—Ä: /deletefile example.txt""")

@dp.message_handler(commands=["adminlist"])
async def adminlist_cmd(message: types.Message):
    admins = await bot.get_chat_administrators(message.chat.id)
    admin_list = "\n".join([f"@{admin.user.username}" for admin in admins])
    await message.reply(f"""[üë•] –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ —á–∞—Ç–∞:
{admin_list}""")

if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
