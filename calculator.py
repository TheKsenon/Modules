from telethon import functions
from telethon.tl.types import Message
import asyncio
import logging

from .. import loader, utils

logger = logging.getLogger(__name__)

@loader.tds
class CalculatorMod(loader.Module):
    """
    –ú–æ–¥—É–ª—å –¥–ª—è –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞. –í—ã–ø–æ–ª–Ω—è–µ—Ç –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏.
    """

    strings = {
        "name": "Calculator",
        "no_args": "üö´ –ù–µ —É–∫–∞–∑–∞–Ω–æ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è!",
    }

    def __init__(self):
        self.name = self.strings["name"]

    async def client_ready(self, client, db):
        self.client = client
        self.db = db

    async def calculatecmd(self, message: Message):
        """
        {expression} - –≤—ã—á–∏—Å–ª–∏—Ç—å –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ
        """
        args = utils.get_args_raw(message)

        if not args:
            return await utils.answer(message, self.strings["no_args"])

        try:
            result = eval(args)
            text = f"<b>‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç:</b> {result}"
        except Exception as e:
            text = f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—á–∏—Å–ª–µ–Ω–∏–∏: {str(e)}"

        return await utils.answer(message, text
