import httpx
from aiogram import Bot, Dispatcher, types, exceptions
from aiogram import executor

bot = Bot(token="6402469481:AAEV5DwRavNsbAuqL_IDMi-yuNtSgfysVFg")
dp = Dispatcher(bot)
users = set()
gpt_count = 0
sdxl_count = 0
start_count = 0

@dp.message_handler(commands=["start"])
async def start_cmd(message: types.Message):
    global users, start_count
    if message.from_user.id not in users:
        with open("users.txt", "a") as file:
            file.write(f"{message.from_user.id};")
        users.add(message.from_user.id)
    start_count += 1
    await message.reply("""[üî•] –í—ã –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ —Å–∞–º—ã–π –±—ã—Å—Ç—Ä—ã–π GPT –ë–æ—Ç. 

[ü™Ñ] –ö–æ–º–∞–Ω–¥—ã:
/gpt PROMPT - –ü–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç GPT-Dev4. –í–º–µ—Å—Ç–æ PROMPT –Ω–∞–ø–∏—à–∏—Ç–µ –∑–∞–ø—Ä–æ—Å.
/sdxl PROMPT - –ü–æ–ª—É—á–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç SDXL. –í–º–µ—Å—Ç–æ PROMPT –Ω–∞–ø–∏—à–∏—Ç–µ –∑–∞–ø—Ä–æ—Å.
/sendmessage MESSAGE - –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –±–æ—Ç–∞.
/readusers - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–æ—Ç–∞.
/nano FILE.FORMAT TEXT - –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç –≤ —Ñ–∞–π–ª–µ.
/infousers - –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞.
/addfile FILE.NAME - –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Ñ–∞–π–ª.

[üîä] –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ –±–æ—Ç–∞: @officialksenon""")

@dp.message_handler(commands=["gpt"])
async def gpt_cmd(message: types.Message):
    global gpt_count
    args = message.get_args()
    gpt_count += 1
    await message.reply("""[ü™Ñ] –í–∞—à –æ—Ç–≤–µ—Ç —É–∂–µ –≥–æ—Ç–æ–≤ üî•
–ú—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–∞–º—É—é –±—ã—Å—Ç—Ä—É—é –º–æ–¥–µ–ª—å –¥–ª—è –≤–∞—à–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è.""")

    async with httpx.AsyncClient(timeout=30.0) as client:
        resp = await client.post("https://opo.k.vu/private/apis/gpt", json={"prompt": args})
        data = resp.text
        await message.reply(f"–û—Ç–≤–µ—Ç GPT ü§ñ: {data}")

@dp.message_handler(commands=["sdxl"])
async def sdxl_cmd(message: types.Message):
    global sdxl_count
    args = message.get_args()
    sdxl_count += 1
    await message.reply("""[ü™Ñ] –í–∞—à–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É–∂–µ –≥–æ—Ç–æ–≤–æ üî•
–ú—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–∞–º—É—é –±—ã—Å—Ç—Ä—É—é –º–æ–¥–µ–ª—å –¥–ª—è –≤–∞—à–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è.""")

    async with httpx.AsyncClient(timeout=120.0) as client:
        resp = await client.post("https://opo.k.vu/private/apis/sdxl", json={"prompt": args})
        data = resp.text
        await message.reply(file=data, caption=f"–í–∞—à–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ, –≤–æ—Ç –æ–Ω–æ: {args}")

@dp.message_handler(commands=["readusers"])
async def readusers_cmd(message: types.Message):
    with open("users.txt", "r") as file:
        user_list = file.read().split(";")
    users = "\n".join([f"{user}" for user in user_list if user])
    await message.reply(f"""–õ—é–¥–∏, –∫–æ—Ç–æ—Ä—ã–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç –±–æ—Ç–∞:
{users}""")

@dp.message_handler(commands=["sendmessage"])
async def sendmessage_cmd(message: types.Message):
    args = message.get_args()
    with open("users.txt", "r") as file:
        user_list = file.read().split(";")
    for user_id_str in user_list:
        if user_id_str:
            try:
                user_id = int(user_id_str)
                await bot.send_message(user_id, args)
            except exceptions.ChatNotFound:
                print(f"Chat not found for user: {user_id}")
            except ValueError:
                print(f"Invalid user_id format: {user_id_str}")
    await message.reply(f"""[üì¨] –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º: {args}""")

@dp.message_handler(commands=["nano"])
async def nano_cmd(message: types.Message):
    args = message.get_args().split(" ", 2)
    if len(args) == 3:
        file_name, file_format, new_text = args
        file_path = f"{file_name}.{file_format}"
        with open(file_path, "w") as file:
            file.write(new_text)
        await message.reply(f"""[üñäÔ∏è] –¢–µ–∫—Å—Ç –≤ —Ñ–∞–π–ª–µ {file_path} —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: {new_text}""")
    else:
        await message.reply("""[‚ùå] –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã /nano. –ü—Ä–∏–º–µ—Ä: /nano users txt hi!""")

@dp.message_handler(commands=["infousers"])
async def infousers_cmd(message: types.Message):
    global users, gpt_count, sdxl_count, start_count
    users_count = len(users)
    await message.reply(f"""[‚ÑπÔ∏è] –ò—Å–ø–æ–ª—å–∑—É—é—Ç –ò–ò: {users_count}
–ù–∞–ø–∏—Å–∞–Ω–æ /gpt: {gpt_count}
–ù–∞–ø–∏—Å–∞–Ω–æ /sdxl: {sdxl_count}
–ù–∞–ø–∏—Å–∞–Ω–æ /start: {start_count}""")

@dp.message_handler(commands=["addfile"])
async def addfile_cmd(message: types.Message):
    args = message.get_args().split(" ", 1)
    if len(args) == 1:
        file_name = args[0]
        with open(file_name, "w"):
            pass
        await message.reply(f"""[üìÑ] –§–∞–π–ª {file_name} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω.""")
    else:
        await message.reply("""[‚ùå] –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã /addfile. –ü—Ä–∏–º–µ—Ä: /addfile example.txt""")

if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
